package org.csii.yeeframe.ui;import android.app.Activity;import android.os.Bundle;import android.os.Handler;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import org.csii.yeeframe.utils.YeeLoger;import java.util.List;public abstract class SupportFragment extends android.support.v4.app.Fragment implements        OnClickListener {    public static final int WHICH_MSG = 0X37211;    protected View fragmentRootView;    protected FragmentManager supportFragmentManager;    /**     * 一个私有回调类，线程中初始化数据完成后的回调     */    private interface ThreadDataCallBack {        void onSuccess();    }    private static ThreadDataCallBack callback;    // 当线程中初始化的数据初始化完成后，调用回调方法    private static Handler threadHandle = new Handler() {        @Override        public void handleMessage(android.os.Message msg) {            if (msg.what == WHICH_MSG) {                callback.onSuccess();            }        }        ;    };    protected abstract View inflaterView(LayoutInflater inflater,                                         ViewGroup container, Bundle bundle);    /**     * initialization widget, you should look like parentView.findviewbyid(id);     * call method     *     * @param parentView     */    protected void initWidget(View parentView) {    }    /**     * initialization data     */    protected void initData() {    }    /**     * initialization data. And this method run in background thread, so you     * shouldn't change ui<br>     * on initializated, will call threadDataInited();     */    protected void initDataFromThread() {        callback = new ThreadDataCallBack() {            @Override            public void onSuccess() {                threadDataInited();            }        };    }    /**     * 如果调用了initDataFromThread()，则当数据初始化完成后将回调该方法。     */    protected void threadDataInited() {    }    /**     * widget click method     */    protected void widgetClick(View v) {    }    @Override    public void onClick(View v) {        widgetClick(v);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        supportFragmentManager = getActivity().getSupportFragmentManager();        fragmentRootView = inflaterView(inflater, container, savedInstanceState);        AnnotateUtil.initBindView(this, fragmentRootView);        initData();        initWidget(fragmentRootView);        new Thread(new Runnable() {            @Override            public void run() {                initDataFromThread();                threadHandle.sendEmptyMessage(WHICH_MSG);            }        }).start();        return fragmentRootView;    }    protected <T extends View> T bindView(int id) {        return (T) fragmentRootView.findViewById(id);    }    protected <T extends View> T bindView(int id, boolean click) {        T view = (T) fragmentRootView.findViewById(id);        if (click) {            view.setOnClickListener(this);        }        return view;    }    /***************************************************************************     * print Fragment callback methods     ***************************************************************************/    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        YeeLoger.state(getClass().getSimpleName(), "---------onCreate ");    }    @Override    public void onHiddenChanged(boolean hidden) {        super.onHiddenChanged(hidden);        YeeLoger.state(getClass().getSimpleName(), "---------onHiddenChanged: " + hidden);    }    @Override    public void onResume() {        YeeLoger.state(getClass().getSimpleName(), "---------onResume ");        super.onResume();    }    @Override    public void onPause() {        YeeLoger.state(getClass().getSimpleName(), "---------onPause ");        super.onPause();    }    @Override    public void onStop() {        YeeLoger.state(getClass().getSimpleName(), "---------onStop ");        super.onStop();    }    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);        YeeLoger.state(getClass().getSimpleName(), "---------onAttach ");    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        YeeLoger.state(getClass().getSimpleName(), "---------onActivityCreated ");    }    @Override    public void onStart() {        super.onStart();        YeeLoger.state(getClass().getSimpleName(), "---------onStart ");    }    @Override    public void onDestroy() {        super.onDestroy();        YeeLoger.state(getClass().getSimpleName(), "---------onDestroy ");    }    @Override    public void onDetach() {        super.onDetach();        YeeLoger.state(getClass().getSimpleName(), "---------onDetach ");    }    @Override    public void onDestroyView() {        YeeLoger.state(getClass().getSimpleName(), "---------onDestroyView ");        super.onDestroyView();    }    protected void switchFragmentAddStack(int fl, SupportFragment fragment, String mItemName) {        supportFragmentManager                .beginTransaction()                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)//                .setCustomAnimations(R.anim.slide_right_in, R.anim.slide_left_out, R.anim.slide_left_in, R.anim.slide_right_out)                .addToBackStack(null)                .replace(fl, fragment, mItemName)                .commit();    }    protected void switchFragment(int fl, SupportFragment fragment, String mItemName) {        supportFragmentManager                .beginTransaction()                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)//                .setCustomAnimations(R.anim.slide_right_in, R.anim.slide_left_out)                .replace(fl, fragment, mItemName)                .commit();    }    /**     * 切换嵌套fragment时使用getChildFragmentManager()     *     * @param fl     * @param fragment     * @param mItemName     */    protected void switchChildFragment(int fl, SupportFragment fragment, String mItemName) {        getChildFragmentManager()                .beginTransaction()                .replace(fl, fragment, mItemName)                .commit();    }    /**     * 切换嵌套fragment时使用getChildFragmentManager()     *     * @param fl     * @param fragment     * @param mItemName     */    protected void switchChildFragmentAddStack(int fl, SupportFragment fragment, String mItemName) {        getChildFragmentManager()                .beginTransaction()                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)                .addToBackStack(null)                .replace(fl, fragment, mItemName)                .commit();    }    protected void showChildFragment(int fl, SupportFragment supportFragment, String mItemName, boolean isAdd) {        FragmentTransaction fragmentTransaction = getChildFragmentManager().beginTransaction();        if (isAdd) {            fragmentTransaction.add(fl, supportFragment, mItemName);        } else {            List<Fragment> fragments = getChildFragmentManager().getFragments();            for (int i = 0; i < fragments.size(); i++) {                if (mItemName.equals(fragments.get(i).getTag())) {                    fragmentTransaction.show(fragments.get(i));                } else {                    fragmentTransaction.hide(fragments.get(i));                }            }        }        fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);        fragmentTransaction.commit();    }    /**     * 手动回收     */    public void gcAndFinalize() {        Runtime runtime = Runtime.getRuntime();        System.gc();        runtime.runFinalization();        System.gc();    }}